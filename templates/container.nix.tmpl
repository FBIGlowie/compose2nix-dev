{{- $name := .Project.With .Name -}}
{{- $runtime := .Runtime | printf "%s" -}}
{{- $labels := labelMapToLabelFlags .Labels -}}
virtualisation.oci-containers.containers."{{$name}}" = {
  image = "{{.Image}}";

  {{- if .Environment}}
  environment = {
    {{- range $k, $v := .Environment}}
    {{$k}} = "{{$v}}";
    {{- end}}
  };
  {{- end}}

  {{- if .EnvFiles}}
  environmentFiles = [
    {{- range .EnvFiles}}
    "${./{{.}}}"
    {{- end}}
  ];
  {{- end}}

  {{- if .Volumes}}
  volumes = [
    {{- range $k, $v := .Volumes}}
    "{{$v}}"
    {{- end}}
  ];
  {{- end}}

  {{- if .Ports}}
  ports = [
    {{- range .Ports}}
    "{{.}}"
    {{- end}}
  ];
  {{- end}}

  {{- if .Labels}}
  labels = {
    {{- range $k, $v := .Labels}}
    "{{$k}}" = "{{$v}}";
    {{- end}}
  };
  {{- end}}

  {{- if .DependsOn}}
  dependsOn = [
    {{- range .DependsOn}}
    "{{.}}"
    {{- end}}
  ];
  {{- end}}

  {{- if .ExtraOptions}}
  extraOptions = [
    {{- range .ExtraOptions}}
    "{{.}}"
    {{- end}}
  ];
  {{- end}}

  {{- if .User}}
  user = "{{.User}}";
  {{- end}}

  {{- if not .AutoStart}}
  autoStart = false;
  {{- end}}
};
{{- if .SystemdConfig}}
systemd.services."{{$runtime}}-{{$name}}" = {
  {{- if .SystemdConfig.Service}}
  serviceConfig = {
  {{- range $k, $v := .SystemdConfig.Service}}
    {{$k}} = {{toNixValue $v}};
  {{- end}}
  };
  {{- end}}
  {{- if .SystemdConfig.Unit}}
  unitConfig = {
  {{- range $k, $v := .SystemdConfig.Unit}}
    {{$k}} = {{toNixValue $v}};
  {{- end}}
  };
  {{- end}}
  {{- if .SystemdConfig.StartLimitBurst}}
  startLimitBurst = {{derefInt .SystemdConfig.StartLimitBurst}};
  {{- end}}
  {{- if .SystemdConfig.StartLimitIntervalSec}}
  startLimitIntervalSec = {{derefInt .SystemdConfig.StartLimitIntervalSec}};
  {{- end}}
};
{{- end}}